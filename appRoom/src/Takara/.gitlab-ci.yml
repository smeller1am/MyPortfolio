stages: 
  - build
  - deploy
  
variables:
  PROJECT_PATH: frontend/takara-ui
  PROJECT_FOLDER: .
  HTTP_PORT: 80

.docker_login: &docker_login
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

.docker_build: &docker_build
  script:
    - docker build --no-cache -f $PROJECT_FOLDER/$SERVICE_FOLDER/Dockerfile -t $IMAGE_PATH ./$PROJECT_FOLDER
    - docker push $IMAGE_PATH

.ssh_deploy: &ssh_deploy
  script:
    - echo "Starting to deploy"
    - chmod og= $SSH_TAKARA_PRIVATE_KEY
    - apk update && apk add openssh-client
    - ssh -i $SSH_TAKARA_PRIVATE_KEY -o StrictHostKeyChecking=no $TAKARA_SERVER_USER@$TAKARA_SERVER_IP "docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY"
    - ssh -i $SSH_TAKARA_PRIVATE_KEY -o StrictHostKeyChecking=no $TAKARA_SERVER_USER@$TAKARA_SERVER_IP "docker pull $IMAGE_PATH"
    - ssh -i $SSH_TAKARA_PRIVATE_KEY -o StrictHostKeyChecking=no $TAKARA_SERVER_USER@$TAKARA_SERVER_IP "docker container rm -f $SERVICE_NAME || true"
    - ssh -i $SSH_TAKARA_PRIVATE_KEY -o StrictHostKeyChecking=no $TAKARA_SERVER_USER@$TAKARA_SERVER_IP "docker run -d -i --name $SERVICE_NAME --network=npm_default --restart=always $IMAGE_PATH"


.takara_ui_default_variables: &takara_ui_default_variables
  SERVICE_NAME: takara-ui
  SERVICE_FOLDER: .
  IMAGE_PATH: $CI_REGISTRY/$PROJECT_PATH:$CI_PIPELINE_ID

build:
  stage: build
  <<: *docker_login
  <<: *docker_build
  variables:
    <<: *takara_ui_default_variables
  only:
    - dev

deploy:
  stage: deploy
  image: alpine:latest
  <<: *ssh_deploy
  variables:
    <<: *takara_ui_default_variables
  only:
    - dev



