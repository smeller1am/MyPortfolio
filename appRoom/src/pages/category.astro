---
import Breadcrumbs from "@components/Breadcrumbs.astro";
import Button from "@components/Button.astro";
import CategoryTag from "@components/CategoryTag.astro";
import Filter from "@components/Filter.astro";
import FilterTrigger from "@components/FilterTrigger.astro";
import Layout from "@components/Layout.astro";
import Pagination from "@components/Pagination.astro";
import ProductCard from "@components/ProductCard.astro";
import Select from "@components/Select.astro";

const tags: string[] = [
  "iPhone 15 Pro Max",
  "iPhone 15 Pro",
  "iPhone 15",
  "iPhone 15 Plus",
  "iPhone 15 Pro Max",
  "iPhone 15 Pro",
  "iPhone 15",
  "iPhone 15",
  "iPhone 15 Plus",
  "iPhone 15 Pro Max",
  "iPhone 15 Pro",
  "iPhone 15 Plus",
];

const cards: { sale: boolean; tag: string }[] = [
  { sale: true, tag: "-10 000" },
  { sale: false, tag: "" },
  { sale: true, tag: "" },
  { sale: true, tag: "" },
  { sale: true, tag: "" },
  { sale: true, tag: "-10 000" },
  { sale: true, tag: "" },
  { sale: false, tag: "" },
  { sale: true, tag: "" },
  { sale: true, tag: "" },
  { sale: true, tag: "-10 000" },
  { sale: false, tag: "" },
  { sale: true, tag: "" },
  { sale: true, tag: "" },
  { sale: true, tag: "" },
  { sale: true, tag: "-10 000" },
];

const options: {value: string, label: string}[] = [{value: "default", label: "По умолчанию"},{value: "increase", label: "По возрастанию"},{value: "decrease", label: "По убыванию"}];
---

<Layout title="Категория">
  <Breadcrumbs items={["Главная"]} last="iPhone 15" />
  <section class="category">
    <div class="category__container">
      <div class="category__tags">
        {
          tags.map((text, index) => (
            <CategoryTag {text} active={index === 0} variant="small" />
          ))
        }
      </div>
      <div class="category__filter">
        <FilterTrigger variant="open" />
        <Filter />
      </div>
      <div class="category__sort">
        <div class="category__sort-text">Сортировать</div>
        <Select {options} />
      </div>
      <div class="category__count">999 товаров</div>
      <!-- <div class="category__content" id="category__content" data-search="true"> -->
      <div class="category__content" id="category__content">
        {
          cards.map(({ tag, sale }) => (
            <ProductCard variant="small" {tag} {sale} />
          ))
        }
      </div>
      <div class="category__pagination">
        <input type="hidden" value="11">
        <Pagination />
      </div>
      <div class="category__more">
        <Button variant="more" color="secondary">Показать еще</Button>
      </div>
    </div>
  </section>
</Layout>

<style is:global lang="scss">
  .category {
    @include section();
    flex-grow: 1;
    margin-bottom: fluid(100px, 216px);

    &__container {
      display: grid;
      grid-area: center;
      align-items: start;
      grid-template-areas: "tags tags tags" "filter sort count" "filter content content" ". pagination more";
      grid-template-columns: 340px auto auto;
      grid-template-rows: auto auto 1fr auto;
      column-gap: fluid(16px, 32px);
    }

    &__tags {
      grid-area: tags;
      display: flex;
      flex-wrap: wrap;
      gap: fluid(8px, 15px);
      margin-bottom: fluid(20px, 40px);
    }

    &__filter {
      grid-area: filter;
    }

    &__sort {
      grid-area: sort;
      justify-self: start;
      display: flex;
      gap: 12px;
      /* align-items: center; */

      &-text {
        line-height: 1.8;
        font-size: 16px;
        font-weight: 400;
        color: $color-text-gray;
      }
    }

    &__count {
      grid-area: count;
      justify-self: end;
      font-size: 16px;
      color: $color-text-gray;
      font-weight: 400;
      align-self: center;
    }

    &__content {
      margin-top: 25px;
      grid-area: content;
      display: grid;
      gap: 15px;
      grid-template-columns: repeat(auto-fill, minmax(fluid(180px, 230px), 1fr));
      margin-bottom: fluid(40px, 60px);
    }

    &__pagination {
      justify-self: start;
      grid-area: pagination;
      &.hidden{
        display: none;
      }
    }

    &__more {
      grid-area: more;
      justify-self: end;
      display: flex;
      min-width: 215px;
      &.hidden{
        display: none;
      }
    }
  }

  @media (max-width: 992px) {
    .category {
      &__container {
        row-gap: 20px;
      }

      &__content {
        margin-bottom: 5px;
      }

      &__tags {
        margin: unset;
        gap: 5px;
      }

      &__sort {
        &-text {
          display: none;
        }
      }

      &__pagination {
        margin-top: 8px;
      }
    }
  }

  @media (max-width: 992px) {
    .category {
      margin-bottom: 45px;
      &__container {
        grid-template-areas: "filter sort" "tags tags" "content content" "more more" "pagination pagination" "count count";
        grid-template-columns: auto auto;
      }

      &__content {
        grid-template-columns: repeat(3, 1fr);
        margin-top: unset;
      }

      &__tags {
        flex-wrap: unset;
        overflow-x: auto;
      }

      &__filter {
        justify-self: start;
      }

      &__sort {
        justify-self: end;
      }

      &__count {
        justify-self: center;
      }

      &__pagination {
        justify-self: center;
      }

      &__more {
        justify-self: center;
      }
    }
  }

  @media (max-width: 768px) {
    .category {
      &__container {
      }

      &__content {
        grid-template-columns: repeat(2, 1fr);
        gap: 10px;
      }

      &__count {
        font-size: 14px;
      }
    }
  }
  @media (max-width: 576px) {
    .category {
      &__container {
      }

      &__content {
      }

      &__count {
      }

      &__tags {
        margin-inline: -$p;
        padding-inline: $p;
      }
    }
  }
</style>

<script>
  import { setUpMiniBuyButtons } from "src/script/shared";

  setUpMiniBuyButtons();
</script>