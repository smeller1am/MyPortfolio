---
import Button from "./Button.astro"
import Checkbox from "./Checkbox.astro"
import Fieldset from "./Fieldset.astro"
import FilterTrigger from "./FilterTrigger.astro"
import Input from "./Input.astro"
import Switch from "./Switch.astro"
---

<div class="filter">
  <div class="filter__header">
    <div class="filter__header-container">
      <div class="filter__title">Фильтр</div>
      <FilterTrigger variant="close" />
    </div>
  </div>
  <div class="filter__heading">
    <div class="filter__heading-icon icon-filter"></div>
    <div class="filter__subtitle">Фильтр</div>
  </div>

  <div class="filter__content">
    <div class="filter__content-container">
      <Fieldset legend="Цена, ₽">
        <div class="filter__even">
          <Input name="min_price" placeholder="499" size="10" variant="filter" />
          <Input name="max_price" placeholder="100 999" size="10" variant="filter" />
        </div>
      </Fieldset>
      <div class="filter__row">
        <div class="filter__link">Товары со скидкой</div>
        <Switch />
      </div>
      <div class="filter__accordion">
        <div class="ac" data-open="true">
          <div class="ac-header">
            <div class="ac-trigger filter__link">Объем встроенной памяти</div>
          </div>
          <div class="ac-panel">
            <div class="filter__list">
              <Checkbox data-name="pa_obem-vstroennoj-pamyati" variant="small" name="50" id="ram1">512 Гб</Checkbox>
              <Checkbox data-name="pa_obem-vstroennoj-pamyati" name="49" variant="small" id="ram2">256 Гб</Checkbox>
              <Checkbox data-name="pa_obem-vstroennoj-pamyati" name="61" variant="small" id="ram3">128 Гб</Checkbox>
              <Checkbox data-name="pa_obem-vstroennoj-pamyati" name="3379" variant="small" id="ram4">1 Tb</Checkbox>
              <Checkbox data-name="pa_obem-vstroennoj-pamyati" variant="small" name="50" id="ram1">512 Гб</Checkbox>
              <Checkbox data-name="pa_obem-vstroennoj-pamyati" name="49" variant="small" id="ram2">256 Гб</Checkbox>
              <Checkbox data-name="pa_obem-vstroennoj-pamyati" name="61" variant="small" id="ram3">128 Гб</Checkbox>
              <Checkbox data-name="pa_obem-vstroennoj-pamyati" name="3379" variant="small" id="ram4">1 Tb</Checkbox>
              <Checkbox data-name="pa_obem-vstroennoj-pamyati" name="48" variant="small" id="ram5">64 Гб</Checkbox>
            </div>
          </div>
        </div>
        <div class="ac">
          <div class="ac-header">
            <div class="ac-trigger filter__link">Диагональ экрана</div>
          </div>
          <div class="ac-panel">
            <div class="filter__list">
              <Checkbox data-name="pa_podderzhka-wi-fi" name="4043" variant="small" id="ram6"
                >Wi-Fi 802.11 a/b/g/n/ac/6</Checkbox
              >
              <Checkbox data-name="pa_podderzhka-wi-fi" name="4091" variant="small" id="ram5"
                >Wi-Fi 802.11 a/b/g/n/ac/6e</Checkbox
              >
              <Checkbox data-name="pa_podderzhka-wi-fi" name="4311" variant="small" id="ram7">-</Checkbox>
              <Checkbox data-name="pa_podderzhka-wi-fi" name="4043" variant="small" id="ram6"
                >Wi-Fi 802.11 a/b/g/n/ac/6</Checkbox
              >
              <Checkbox data-name="pa_podderzhka-wi-fi" name="4091" variant="small" id="ram5"
                >Wi-Fi 802.11 a/b/g/n/ac/6e</Checkbox
              >
              <Checkbox data-name="pa_podderzhka-wi-fi" name="4311" variant="small" id="ram7">-</Checkbox>
              <Checkbox data-name="pa_podderzhka-wi-fi" name="4043" variant="small" id="ram6"
                >Wi-Fi 802.11 a/b/g/n/ac/6</Checkbox
              >
              <Checkbox data-name="pa_podderzhka-wi-fi" name="4091" variant="small" id="ram5"
                >Wi-Fi 802.11 a/b/g/n/ac/6e</Checkbox
              >
              <Checkbox data-name="pa_podderzhka-wi-fi" name="4311" variant="small" id="ram7">-</Checkbox>
            </div>
          </div>
        </div>
        <!--<div class="ac">
          <div class="ac-header">
            <div class="ac-trigger filter__link">Материал корпуса</div>
          </div>
          <div class="ac-panel">
            <div class="filter__list">
              <Checkbox variant="small" name="ram" id="ram7">Дерево</Checkbox>
              <Checkbox variant="small" name="ram" id="ram8">Метал</Checkbox>
              <Checkbox checked variant="small" name="ram" id="ram9"
                >Олово</Checkbox
              >
            </div>
          </div>
        </div>
        <div class="ac">
          <div class="ac-header">
            <div class="ac-trigger filter__link">Цвет</div>
          </div>
          <div class="ac-panel">
            <div class="filter__list">
              <Checkbox checked variant="small" name="ram" id="ram10"
                >Красный</Checkbox
              >
              <Checkbox variant="small" name="ram" id="ram11">Чёрный</Checkbox>
              <Checkbox variant="small" name="ram" id="ram12">Белый</Checkbox>
            </div>
          </div>
        </div> -->
      </div>
    </div>
  </div>
  <div class="filter__submit">
    <div class="filter__submit-container">
      <Button variant="submit" color="primary">Показать</Button>
    </div>
  </div>
</div>

<style is:global lang="scss">
  .filter {
    border-radius: 30px;
    background-color: white;
    padding: fluid(20px, 30px);
    box-shadow: $shadow-card;
    display: flex;
    flex-direction: column;
    gap: fluid(20px, 30px);

    &__header {
      display: none;
      &-container {
      }
    }

    &__content {
      &-container {
        display: flex;
        flex-direction: column;
        gap: 28px;
      }
    }

    &__row {
      display: flex;
      justify-content: space-between;
      gap: 10px;
    }

    &__even {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 10px;
    }

    &__title {
      font-size: 20px;
      font-weight: 500;
    }

    &__subtitle {
      font-size: 16px;
      font-weight: 600;
    }

    &__heading {
      display: flex;
      align-items: center;
      gap: 20px;
      margin-bottom: 9px;

      &-icon {
        font-size: 30px;
      }
    }

    &__submit {
      display: none;
      &-container {
        display: flex;
      }
    }

    &__accordion {
      display: flex;
      flex-direction: column;
      gap: 25px;

      & .ac.is-active > .ac-header .ac-trigger::after {
        content: url('data:image/svg+xml,<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M13.5 10.8L9 6.3L4.5 10.8" stroke="%230A0909" stroke-miterlimit="10" stroke-linecap="round" stroke-linejoin="round"/></svg>');
      }

      & .ac {
        margin-top: unset;
        border: unset;
        background-color: unset;
      }

      & .ac-trigger {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font: unset;
        color: inherit;
        text-align: unset;
        padding: unset;
        transition: unset;
        background-color: unset;
        font-weight: 400;
        font-size: 16px;

        &::after {
          height: 18px;
          width: 18px;
          right: -4px;
        }

        &[aria-expanded="true"]::after {
          content: url('data:image/svg+xml,<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M13.5 10.8L9 6.3L4.5 10.8" stroke="%230A0909" stroke-miterlimit="10" stroke-linecap="round" stroke-linejoin="round"/></svg>');
        }
        &[aria-expanded="false"]::after {
          content: url('data:image/svg+xml,<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M13.5 7.20001L9 11.7L4.5 7.20001" stroke="%230A0909" stroke-miterlimit="10" stroke-linecap="round" stroke-linejoin="round"/></svg>');
        }
      }
    }

    &__list {
      display: flex;
      flex-direction: column;
      gap: 5px;
      margin-top: 10px;
      max-height: 135px;
      overflow-y: auto;
      scrollbar-width: thin;
    }

    &__link {
      font-weight: 400;
      font-size: 16px;
    }
  }

  @media (max-width: 992px) {
    .filter {
      border-radius: unset;
      box-shadow: unset;
      z-index: 30;
      position: fixed;
      top: -100%;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: white;
      transition: top 0.38s ease-in-out;
      gap: unset;
      padding: unset;

      &__header {
        padding-top: 20px;
        @include section();
        margin-bottom: 30px;
        &-container {
          display: flex;
          align-items: center;
          grid-area: center;
          justify-content: space-between;
        }
      }

      &__heading {
        display: none;
      }

      &__content {
        @include section();
        flex-grow: 1;
        overflow-x: auto;
        margin-bottom: 20px;
        &-container {
          grid-area: center;
        }
      }

      &__submit {
        @include section();
        padding-top: 15px;
        padding-bottom: 25px;
        &-container {
          grid-area: center;
          display: flex;
          justify-items: center;
        }
      }
    }
  }
</style>

<script>
  //@ts-ignore
  import Accordion from "accordion-js"
  import { sendFilters, sendSearchFilters, type Product } from "../script/api"
  //@ts-ignore
  import Pagination from "tui-pagination"
  import Choices from "choices.js"

  import { compareAdd, compareDelete } from "../script/api"
  import { formatPrice } from "../script/utils"
  import { setUpMiniBuyButtons } from "src/script/shared"
  import { Fancybox } from "@fancyapps/ui"

  function addButtonsListener() {
    const compareButtons = document.querySelectorAll(".product-card__compare")
    compareButtons?.forEach((el: any) => {
      const id = el.closest(".product-card").getAttribute("data-id")
      const category = el.closest(".product-card").getAttribute("data-category")

      el.addEventListener("click", async (e: any) => {
        e.preventDefault()
        try {
          let isAdd = JSON.parse(el.getAttribute("data-isadd"))

          const text = el.querySelector(".product-card__compare-text")

          el.style.pointerEvents = "none"

          const { count } = isAdd ? await compareAdd(+id, +category) : await compareDelete(+id, +category)
          setCompareCount(count)
          text.innerText = isAdd ? "В сравнении" : "Сравнить"
          el.setAttribute("data-isadd", isAdd ? "false" : "true")
          el.style.pointerEvents = "auto"

          if (isAdd) {
            const modal = new Fancybox([{ src: "#compare-success" }], {
              closeButton: false,
              compact: false,
              autoFocus: false,
            })

            const close = document.querySelector("#compare-success .button")

            if (close) {
              close.addEventListener("click", () => modal.close())
            }
          }
        } catch {}
      })
      function setCompareCount(count: number) {
        const counters = document.querySelectorAll(".header__compare")
        counters.forEach(counter => {
          if (counter instanceof HTMLElement) {
            counter.setAttribute("data-count", String(count))
          }
        })
      }
    })
  }

  addButtonsListener()

  const accordion = document.querySelector(".filter__accordion")
  if (accordion) {
    const accordions = accordion.querySelectorAll(".ac")

    let opened: number[] = []
    Array.from(accordions).forEach((ac, index) => {
      if (ac.getAttribute("data-open") === "true") {
        opened.push(index)
      }
    })

    new Accordion(".filter__accordion", {
      duration: 380,
      showMultiple: true,
      openOnInit: opened,
    })
  }
  const catalog = document.querySelector(".category")
  if (catalog) {
    let currentPage = 0
    const paginationItems = document.querySelector('.category__pagination input[type="hidden"]') as HTMLInputElement
    let paginationItemsValue = Number(paginationItems?.value) as number
    if (paginationItemsValue <= 1) {
      document.querySelector(".category__pagination")?.classList.add("hidden")
      document.querySelector(".category__more")?.classList.add("hidden")
    }
    const pagination = new Pagination(document.querySelector(".pagination"), {
      totalItems: paginationItemsValue ?? 1,
      itemsPerPage: 1,
      visiblePages: 5,
      centerAlign: false,
    })
    setTimeout(function () {
      if (document.querySelector(".tui-is-selected.tui-last-child")) {
        document.querySelector(".category__more")?.classList.add("hidden")
      }
    }, 100)
    pagination.on("afterMove", (event: any) => {
      currentPage = event.page
      console.log(currentPage)
    })
    const select = document.querySelector(".select__element")

    const choice = new Choices(select ?? "", {
      searchEnabled: false,
      itemSelectText: "",
      allowHTML: false,
    })

    let checked: { [key: string]: any } = {}
    const filter = document.querySelector(".filter__content")
    if (filter instanceof HTMLElement) {
      filterHandler(filter)
      setFilters()
    }

    const path = new URL(window.location.href).pathname
    const list = document.querySelector(".category__content")
    const card = list?.querySelector(".product-card")
    const categoryID = card?.getAttribute("data-category")
    const searchValue = document.querySelector(".search-bar__element") as HTMLInputElement
    const search = document.querySelector(".category__content") as HTMLElement
    const isSearch = search.dataset.search
    function filterHandler(container: HTMLElement) {
      const inputs = container.querySelectorAll(".filter input")
      const sort = document.querySelector(".category__sort select")
      const search = document.querySelector(".search-bar__element")
      const showMore = document.querySelector(".category__more .button")
      const pagination = document.querySelector(".category__pagination")
      inputs.forEach(input => {
        if (input instanceof HTMLInputElement) {
          input.addEventListener("change", CatalogHandler)
        }
      })
      pagination?.addEventListener("click", CatalogHandler)
      showMore?.addEventListener("click", CatalogHandler)
      sort?.addEventListener("change", CatalogHandler)
      search?.addEventListener("change", CatalogHandler)
    }
    function setFilters() {
      let params = new URLSearchParams(window.location.search)
      const result: { [key: string]: string | string[] } = {}
      params.forEach((value, key) => {
        if (!result[key]) {
          result[key] = []
        }
        if (result[key] instanceof Array) {
          result[key].push(value)
        }
      })
      for (var value in result) {
        const item = document.querySelector(`input[name="${value}"]`) as HTMLInputElement
        switch (value) {
          case "sale":
            item.checked = true
            break
          case "sort":
            choice.setChoiceByValue(result[value])
            break
          case "page":
            pagination.movePageTo(Number(result[value]))
            break
          case "min_price":
          case "max_price":
            item.value = String(result[value])
            break
          default:
            if (result[value] instanceof Array) {
              //@ts-ignore
              result[value].forEach(el => {
                const item = document.querySelector(`input[data-name="${value}"][name="${el}"]`) as HTMLInputElement
                if (item) {
                  item.checked = true
                }
              })
            }
            break
        }
      }
      params.forEach((value, key) => {
        if (checked[key]) {
          checked[key] = [...checked[key], value]
        } else if (
          key === "min_price" ||
          key === "max_price" ||
          key === "sort" ||
          key === "sale" ||
          key === "page" ||
          key === "s"
        ) {
          checked[key] = value
        } else {
          checked[key] = [value]
        }
      })
    }
    async function CatalogHandler(e: Event) {
      e.preventDefault()
      let isPaginationClick = false
      const item = e.target
      let isShowMore = false
      let params = new URLSearchParams()
      if (item instanceof HTMLInputElement) {
        if (item?.type === "checkbox") {
          if (item instanceof HTMLInputElement) {
            const key = item.getAttribute("data-name")
            const value = item.getAttribute("name")
            if (key && value) {
              const set = new Set(checked[key])
              if (item.checked) {
                set.add(value)
              } else {
                set.delete(value)
              }
              checked[key] = Array.from(set)
            }
          }
        }
        if (item.closest(".filter__even")) {
          if (item instanceof HTMLInputElement) {
            const key = item.getAttribute("name")
            const value = item.value
            if (value) {
              checked[key ?? 0] = value
            } else {
              delete checked[key ?? 0]
            }
          }
        }
        if (item.classList.contains("switch__element")) {
          const key = item.getAttribute("name")
          const value = item.checked
          if (value) {
            checked[key ?? 0] = String(value)
          } else {
            delete checked[key ?? 0]
          }
        }
      }
      if (item instanceof HTMLSelectElement) {
        if (item.classList.contains("select__element")) {
          const value = item.querySelector("option")?.getAttribute("value")
          checked["sort"] = value ?? ""
        }
      }
      if (item instanceof HTMLInputElement) {
        if (item.classList.contains("search-bar__element")) {
          const key = "s"
          const value = item.value
          if (value) {
            checked[key] = String(value)
          } else {
            delete checked[key]
          }
        }
        console.log(checked)
      }

      if (item instanceof Element) {
        if (item.classList.contains("tui-page-btn")) {
          const value = currentPage
          isPaginationClick = true
          checked["page"] = value
        }
        if (item.closest(".category__more")) {
          const count = document.querySelector(".category__count")?.textContent
          const countNum = count?.match(/\d+/)
          if (countNum) {
            console.log(
              document.querySelectorAll(".product-card.product-card--small").length / parseInt(countNum.join("")) < 1,
            )
            if (
              document.querySelectorAll(".product-card.product-card--small").length / parseInt(countNum.join("")) <
              1
            ) {
              document.querySelector(".category__more")?.classList.add("hidden")
            }
          }
          checked["page"] = checked["page"] ? Number(checked["page"]) + 1 : 2
          pagination.movePageTo(checked["page"])
          isShowMore = true
        }
      }
      for (const [k, v] of Object.entries(checked)) {
        if (v instanceof Array) {
          v.forEach(i => {
            params.append(k, i)
          })
        }
        if (k === "min_price" || k === "max_price" || k === "sale" || k === "sort" || k === "s") {
          if (!params.has(k)) {
            params.append(k, v)
          }
        }
        if (k === "page") {
          // if (!params.has(k)) {
          //   !isPaginationClick ? delete checked[k] : params.append(k, v)
          // }
          params.append(k, v)
        }
      }

      history.pushState({}, "", `${path}?${params.toString()}`)
      if (list instanceof HTMLElement) {
        if (isSearch) {
          checked["s"] = searchValue?.value
        } else {
          checked["term_id"] = categoryID
        }
        try {
          let data
          const maxPrice = document.querySelector('input[name="max_price"]') as HTMLInputElement
          const minPrice = document.querySelector('input[name="min_price"]') as HTMLInputElement
          maxPrice.setAttribute("disabled", "true")
          minPrice.setAttribute("disabled", "true")
          if (isSearch) {
            data = await sendSearchFilters(JSON.stringify(checked))
          } else {
            data = await sendFilters(JSON.stringify(checked))
          }
          maxPrice.removeAttribute("disabled")
          minPrice.removeAttribute("disabled")
          const counter = document.querySelector(".category__count")

          const newElements: HTMLAnchorElement[] = []
          data.products.forEach(product => newElements.push(createProduct(product)))
          minPrice.placeholder = formatPrice(+data.minPrice)
          maxPrice.placeholder = formatPrice(+data.maxPrice)
          if (counter) {
            counter.innerHTML = `${data.count} ${getNoun(data.count, "товар", "товара", "товаров")}`
          }
          if (Math.ceil(data.count / 16) > 1) {
            document.querySelector(".category__pagination")?.classList.remove("hidden")
            document.querySelector(".category__more")?.classList.remove("hidden")
          } else {
            document.querySelector(".category__pagination")?.classList.add("hidden")
            document.querySelector(".category__more")?.classList.add("hidden")
          }
          if (document.querySelector(".tui-is-selected.tui-last-child")) {
            document.querySelector(".category__more")?.classList.add("hidden")
          }
          pagination.setTotalItems(Math.ceil(data.count / 16))
          if (!isPaginationClick) {
            // pagination.movePageTo(1)
            paginationItemsValue = Math.ceil(data.count / 16)
          }
          isShowMore ? "" : (list.innerHTML = "")
          newElements.forEach(element => list.appendChild(element))
          addButtonsListener()
          setUpMiniBuyButtons()
        } catch (error) {}
      }
    }

    function createProduct(product: Product) {
      const element = document.createElement("a")
      if (product.link) element.setAttribute("href", product.link)
      element.setAttribute("class", "product-card product-card--small")
      element.setAttribute("data-id", String(product["data-id"]))
      element.setAttribute("data-category", String(product["data-category"]))

      const container = document.createElement("div")
      container.classList.add("product-card__container")

      const image = document.createElement("img")
      if (product.img) {
        image.classList.add("product-card__image")
        image.src = product.img
        if (product.title) image.alt = product.title
        container.appendChild(image)
      }

      const title = document.createElement("div")
      if (product.title) {
        title.classList.add("product-card__title")
        title.innerHTML = product.title
        container.appendChild(title)
      }

      if (product.price && product.sale) {
        const sale = document.createElement("div")
        sale.innerHTML = formatPrice(product.price)
        sale.setAttribute("class", "product-card__sale ruble")
        container.appendChild(sale)

        const discount = document.createElement("div")
        discount.innerHTML = formatPrice(product.sale - product.price)
        discount.setAttribute("class", "product-card__tag ruble")
        container.appendChild(discount)
      }

      if (product.price) {
        const price = document.createElement("div")
        price.setAttribute("class", "product-card__price ruble")
        price.innerHTML = formatPrice(product.sale ?? product.price)
        container.appendChild(price)
      }

      const compare = document.createElement("div")
      compare.classList.add("product-card__compare")
      compare.dataset.isadd = "true"
      compare.innerHTML = `
                    <span class="product-card__compare-icon icon-compare"></span>
                    <span class="product-card__compare-text"> Сравнить </span>
                    `

      container.appendChild(compare)

      const add = document.createElement("div")
      add.setAttribute("class", "add-cart product-buy icon-cart-arrow")

      container.appendChild(add)

      element.appendChild(container)
      return element
    }
    function getNoun(number: number, one: string, two: string, five: string) {
      let n = Math.abs(number)
      n %= 100
      if (n >= 5 && n <= 20) {
        return five
      }
      n %= 10
      if (n === 1) {
        return one
      }
      if (n >= 2 && n <= 4) {
        return two
      }
      return five
    }
  }
</script>
